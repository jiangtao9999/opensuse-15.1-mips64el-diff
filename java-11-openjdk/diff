Index: java-11-openjdk.spec
===================================================================
--- java-11-openjdk.spec	(revision 1)
+++ java-11-openjdk.spec	(working copy)
@@ -228,6 +228,7 @@
 #
 Patch500:       activation-module.patch
 Patch501:       annotation-module.patch
+Patch600:       jdk-11-fix-mips64el.patch
 BuildRequires:  alsa-lib-devel
 BuildRequires:  autoconf
 BuildRequires:  automake
@@ -510,6 +511,8 @@
 %patch500
 %patch501
 
+%patch600 -p1
+
 # Extract systemtap tapsets
 
 %if %{with_systemtap}
Index: jdk-11-fix-mips64el.patch
===================================================================
--- jdk-11-fix-mips64el.patch	(revision 0)
+++ jdk-11-fix-mips64el.patch	(working copy)
@@ -0,0 +1,54 @@
+Index: b/src/hotspot/cpu/zero/cppInterpreter_zero.cpp
+===================================================================
+--- a/src/hotspot/cpu/zero/cppInterpreter_zero.cpp
++++ b/src/hotspot/cpu/zero/cppInterpreter_zero.cpp
+@@ -367,7 +367,7 @@ int CppInterpreter::native_entry(Method*
+   ThreadStateTransition::transition_from_java(thread, _thread_in_native);
+ 
+   // Make the call
+-  intptr_t result[4 - LogBytesPerWord];
++  intptr_t result[4 - LogBytesPerWord] __attribute__((__aligned__(__alignof__(double))));
+   ffi_call(handler->cif(), (void (*)()) function, result, arguments);
+ 
+   // Change the thread state back to _thread_in_Java.
+--- a/src/hotspot/os/linux/os_linux.cpp
++++ b/src/hotspot/os/linux/os_linux.cpp
+@@ -4567,14 +4567,16 @@ bool os::Linux::signal_handlers_are_inst
+ 
+ // For signal-chaining
+ struct sigaction sigact[NSIG];
+-uint64_t sigs = 0;
+-#if (64 < NSIG-1)
+-#error "Not all signals can be encoded in sigs. Adapt its type!"
+-#endif
++sigset_t sigs;
+ bool os::Linux::libjsig_is_loaded = false;
+ typedef struct sigaction *(*get_signal_t)(int);
+ get_signal_t os::Linux::get_signal_action = NULL;
+ 
++static __attribute__((constructor)) void sigs_init()
++{
++    sigemptyset(&sigs);
++}
++
+ struct sigaction* os::Linux::get_chained_signal_action(int sig) {
+   struct sigaction *actp = NULL;
+ 
+@@ -4649,7 +4651,7 @@ bool os::Linux::chained_handler(int sig,
+ }
+ 
+ struct sigaction* os::Linux::get_preinstalled_handler(int sig) {
+-  if ((((uint64_t)1 << (sig-1)) & sigs) != 0) {
++  if (sigismember(&sigs, sig)) {
+     return &sigact[sig];
+   }
+   return NULL;
+@@ -4658,7 +4660,7 @@ struct sigaction* os::Linux::get_preinst
+ void os::Linux::save_preinstalled_handler(int sig, struct sigaction& oldAct) {
+   assert(sig > 0 && sig < NSIG, "vm signal out of expected range");
+   sigact[sig] = oldAct;
+-  sigs |= (uint64_t)1 << (sig-1);
++  sigaddset(&sigs, sig);
+ }
+ 
+ // for diagnostic
Index: _constraints
===================================================================
--- _constraints	(revision 1)
+++ _constraints	(working copy)
@@ -1,10 +0,0 @@
-<constraints>
-  <hardware>
-    <physicalmemory>
-      <size unit="M">4096</size>
-    </physicalmemory>
-    <disk>
-      <size unit="G">20</size>
-    </disk>
-  </hardware>
-</constraints> 
