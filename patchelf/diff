Index: patchelf.spec
===================================================================
--- patchelf.spec	(revision 1)
+++ patchelf.spec	(working copy)
@@ -25,6 +25,7 @@
 Url:            http://nixos.org/patchelf.html
 Source:         http://releases.nixos.org/%{name}/%{name}-%{version}/%{name}-%{version}.tar.bz2
 Patch0:         no-rpath-prebuilt.patch 
+Patch1:         patchelf-0.9-fix-mips.patch
 BuildRequires:  gcc-c++
 
 %description
@@ -35,6 +36,7 @@
 %prep
 %setup -q
 %patch0 -p1
+%patch1 -p1
 
 %build
 %configure
Index: patchelf-0.9-fix-mips.patch
===================================================================
--- patchelf-0.9-fix-mips.patch	(revision 0)
+++ patchelf-0.9-fix-mips.patch	(working copy)
@@ -0,0 +1,65 @@
+diff -Nrui patchelf-0.9-orig/src/elf.h patchelf-0.9/src/elf.h
+--- patchelf-0.9-orig/src/elf.h	2020-05-15 22:12:16.557608570 +0800
++++ patchelf-0.9/src/elf.h	2020-05-15 22:53:40.999026174 +0800
+@@ -1575,6 +1575,7 @@
+ #define PT_MIPS_REGINFO	0x70000000	/* Register usage information */
+ #define PT_MIPS_RTPROC  0x70000001	/* Runtime procedure table. */
+ #define PT_MIPS_OPTIONS 0x70000002
++#define PT_MIPS_ABIFLAGS 0x70000003
+ 
+ /* Special program header types.  */
+ 
+@@ -1640,7 +1641,8 @@
+    PLT is writable.  For a non-writable PLT, this is omitted or has a zero
+    value.  */
+ #define DT_MIPS_RWPLT        0x70000034
+-#define DT_MIPS_NUM	     0x35
++#define DT_MIPS_RLD_MAP_REL  0x70000035
++#define DT_MIPS_NUM	     0x36
+ 
+ /* Legal values for DT_MIPS_FLAGS Elf32_Dyn entry.  */
+ 
+diff -Nrui patchelf-0.9-orig/src/patchelf.cc patchelf-0.9/src/patchelf.cc
+--- patchelf-0.9-orig/src/patchelf.cc	2020-05-15 22:12:16.557608570 +0800
++++ patchelf-0.9/src/patchelf.cc	2020-05-15 23:00:10.676446970 +0800
+@@ -559,6 +559,15 @@
+                 }
+         }
+ 
++        if (sectionName == ".MIPS.abiflags") {
++            for (unsigned int j = 0; j < phdrs.size(); ++j)
++                if (rdi(phdrs[j].p_type) == PT_MIPS_ABIFLAGS) {
++                    phdrs[j].p_offset = shdr.sh_offset;
++                    phdrs[j].p_vaddr = phdrs[j].p_paddr = shdr.sh_addr;
++                    phdrs[j].p_filesz = phdrs[j].p_memsz = shdr.sh_size;
++                }
++        }
++
+         curOff += roundUp(i->second.size(), sectionAlignment);
+     }
+ 
+@@ -828,9 +837,9 @@
+        (e.g., those produced by klibc's klcc). */
+     Elf_Shdr * shdrDynamic = findSection2(".dynamic");
+     if (shdrDynamic) {
+-        Elf_Dyn * dyn = (Elf_Dyn *) (contents + rdi(shdrDynamic->sh_offset));
++        Elf_Dyn * dyn_table = (Elf_Dyn *) (contents + rdi(shdrDynamic->sh_offset));
+         unsigned int d_tag;
+-        for ( ; (d_tag = rdi(dyn->d_tag)) != DT_NULL; dyn++)
++        for ( Elf_Dyn * dyn = dyn_table ; (d_tag = rdi(dyn->d_tag)) != DT_NULL; dyn++)
+             if (d_tag == DT_STRTAB)
+                 dyn->d_un.d_ptr = findSection(".dynstr").sh_addr;
+             else if (d_tag == DT_STRSZ)
+@@ -869,6 +878,12 @@
+                 dyn->d_un.d_ptr = findSection(".gnu.version_r").sh_addr;
+             else if (d_tag == DT_VERSYM)
+                 dyn->d_un.d_ptr = findSection(".gnu.version").sh_addr;
++            else if (d_tag == DT_MIPS_RLD_MAP_REL) {
++                debug("Updating DT_MIPS_RLD_MAP_REL");
++                Elf_Addr rtld_map_addr = findSection(".rld_map").sh_addr;
++                auto dyn_offset = ((char*)dyn) - ((char*)dyn_table);
++                dyn->d_un.d_ptr = rtld_map_addr + dyn_offset - shdrDynamic->sh_addr;
++            }
+     }
+ 
+ 
