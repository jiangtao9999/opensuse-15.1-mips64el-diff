Index: libqt5-qtwebengine.spec
===================================================================
--- libqt5-qtwebengine.spec	(revision 1)
+++ libqt5-qtwebengine.spec	(working copy)
@@ -80,6 +80,7 @@
 # PATCH-FIX-UPSTREAM
 Patch9:         0003-Silence-most-of-the-GCC-warnings.patch
 
+Patch10:        qtwebengine-5.9.7-add-mips64el.patch
 # http://www.chromium.org/blink not ported to PowerPC
 ExcludeArch:    ppc ppc64 ppc64le s390 s390x
 # Try to fix i586 MemoryErrors with rpmlint
Index: qtwebengine-5.9.7-add-mips64el.patch
===================================================================
--- qtwebengine-5.9.7-add-mips64el.patch	(revision 0)
+++ qtwebengine-5.9.7-add-mips64el.patch	(working copy)
@@ -0,0 +1,708 @@
+From 92fcf4708b778162bab08ab96e1e41636380b416 Mon Sep 17 00:00:00 2001
+From: CaoHuixiong <caohuixiong@loongson.cn>
+Date: Fri, 20 Jul 2018 17:52:06 +0800
+Subject: [PATCH] make qtwebengine can build for mips64
+
+---
+ mkspecs/features/functions.prf | 2 +-
+ 1 file changed, 1 insertion(+), 1 deletion(-)
+
+diff --git a/mkspecs/features/functions.prf b/mkspecs/features/functions.prf
+index bb171f7..1b441bf 100644
+--- a/mkspecs/features/functions.prf
++++ b/mkspecs/features/functions.prf
+@@ -81,7 +81,7 @@ defineTest(isArchSupported) {
+     contains(QT_ARCH, "i386")|contains(QT_ARCH, "x86_64"): return(true)
+     contains(QT_ARCH, "arm")|contains(QT_ARCH, "arm64"): return(true)
+     contains(QT_ARCH, "mips"): return(true)
+-#     contains(QT_ARCH, "mips64"): return(true)
++    contains(QT_ARCH, "mips64"): return(true)
+ 
+     skipBuild("QtWebEngine can only be built for x86, x86-64, ARM, Aarch64, and MIPSel architectures.")
+     return(false)
+-- 
+2.1.0
+
+From 85c24dae610a090de58c9e96efc39b53f38e3a91 Mon Sep 17 00:00:00 2001
+From: CaoHuixiong <caohuixiong@loongson.cn>
+Date: Tue, 24 Jul 2018 09:42:56 +0800
+Subject: [PATCH]     qtwebengine chromium sandbox for loongon support
+
+---
+ src/3rdparty/chromium/sandbox/features.gni         |   6 +-
+ .../sandbox/linux/bpf_dsl/linux_syscall_ranges.h   |   5 +-
+ .../sandbox/linux/bpf_dsl/seccomp_macros.h         |  59 +++++++++++++
+ .../chromium/sandbox/linux/bpf_dsl/syscall_set.cc  |   3 +
+ .../linux/seccomp-bpf-helpers/baseline_policy.cc   |  10 ++-
+ .../linux/seccomp-bpf-helpers/syscall_sets.cc      |  98 +++++++++++++--------
+ .../linux/seccomp-bpf-helpers/syscall_sets.h       |  11 ++-
+ .../chromium/sandbox/linux/seccomp-bpf/syscall.cc  |  51 ++++++++++-
+ .../sandbox/linux/system_headers/linux_seccomp.h   |   3 +
+ 9 files changed, 195 insertions(+), 48 deletions(-)
+
+diff --git a/src/3rdparty/chromium/build/config/features.gni b/src/3rdparty/chromium/build/config/features.gni
+index df33849..a3b473a 100644
+--- a/src/3rdparty/chromium/build/config/features.gni
++++ b/src/3rdparty/chromium/build/config/features.gni
+@@ -28,10 +28,10 @@ declare_args() {
+   # Temporarily disable nacl on arm64 linux to get rid of compilation errors.
+   # TODO(mcgrathr): When mipsel-nacl-clang is available, drop the exclusion.
+   enable_nacl = !is_ios && !is_android && !is_chromecast &&
+-                current_cpu != "mipsel" && !(is_linux && target_cpu == "arm64")
++                current_cpu != "mipsel" && current_cpu != "mips64el" && !(is_linux && target_cpu == "arm64")
+ 
+   # Non-SFI is not yet supported on mipsel
+-  enable_nacl_nonsfi = current_cpu != "mipsel"
++  enable_nacl_nonsfi = current_cpu != "mipsel" && current_cpu != "mips64el"
+ 
+   # Enables WebRTC.
+   enable_webrtc = !is_ios
+@@ -106,7 +106,7 @@ declare_args() {
+ use_seccomp_bpf =
+     (is_linux || is_android) &&
+     (current_cpu == "x86" || current_cpu == "x64" || current_cpu == "arm" ||
+-     current_cpu == "arm64" || current_cpu == "mipsel")
++     current_cpu == "arm64" || current_cpu == "mipsel" || current_cpu == "mips64el")
+ 
+ # Whether we are using the rlz library or not.  Platforms like Android send
+ # rlz codes for searches but do not use the library.
+diff --git a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/linux_syscall_ranges.h b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
+index a747770..aab9f0a 100644
+--- a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
++++ b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/linux_syscall_ranges.h
+@@ -42,7 +42,10 @@
+ 
+ #elif defined(__mips__) && (_MIPS_SIM == _ABI64)
+ 
+-#error "Add support to header file"
++#include <asm/unistd.h>  // for __NR_64_Linux and __NR_64_Linux_syscalls
++#define MIN_SYSCALL         __NR_64_Linux
++#define MAX_PUBLIC_SYSCALL  (MIN_SYSCALL + __NR_64_Linux_syscalls)
++#define MAX_SYSCALL         MAX_PUBLIC_SYSCALL
+ 
+ #elif defined(__aarch64__)
+ 
+diff --git a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/seccomp_macros.h b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/seccomp_macros.h
+index af70f21..69c7fd8 100644
+--- a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/seccomp_macros.h
++++ b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/seccomp_macros.h
+@@ -244,6 +244,65 @@ struct regs_struct {
+ #define SECCOMP_PT_PARM3(_regs)   (_regs).REG_a2
+ #define SECCOMP_PT_PARM4(_regs)   (_regs).REG_a3
+ 
++#elif defined(__mips__) && (_MIPS_SIM == _ABI64)
++#define SECCOMP_ARCH        AUDIT_ARCH_MIPSEL64
++#define SYSCALL_EIGHT_ARGS
++// MIPS sigcontext_t is different from i386/x86_64 and ARM.
++// See </arch/mips/include/uapi/asm/sigcontext.h> in the Linux kernel.
++#define SECCOMP_REG(_ctx, _reg) ((_ctx)->uc_mcontext.gregs[_reg])
++// Based on MIPS n64 ABI syscall convention.
++// On MIPS, when indirect syscall is being made (syscall(__NR_foo)),
++// real identificator (__NR_foo) is not in v0, but in a0
++#define SECCOMP_RESULT(_ctx)    SECCOMP_REG(_ctx, 2)
++#define SECCOMP_SYSCALL(_ctx)   SECCOMP_REG(_ctx, 2)
++#define SECCOMP_IP(_ctx)        (_ctx)->uc_mcontext.pc
++#define SECCOMP_PARM1(_ctx)     SECCOMP_REG(_ctx, 4)
++#define SECCOMP_PARM2(_ctx)     SECCOMP_REG(_ctx, 5)
++#define SECCOMP_PARM3(_ctx)     SECCOMP_REG(_ctx, 6)
++#define SECCOMP_PARM4(_ctx)     SECCOMP_REG(_ctx, 7)
++#define SECCOMP_PARM5(_ctx)     SECCOMP_REG(_ctx, 8)
++#define SECCOMP_PARM6(_ctx)     SECCOMP_REG(_ctx, 9)
++#define SECCOMP_PARM7(_ctx)     SECCOMP_REG(_ctx, 10)
++#define SECCOMP_PARM8(_ctx)     SECCOMP_REG(_ctx, 11)
++#define SECCOMP_NR_IDX          (offsetof(struct arch_seccomp_data, nr))
++#define SECCOMP_ARCH_IDX        (offsetof(struct arch_seccomp_data, arch))
++#define SECCOMP_IP_MSB_IDX      (offsetof(struct arch_seccomp_data,           \
++                                          instruction_pointer) + 4)
++#define SECCOMP_IP_LSB_IDX      (offsetof(struct arch_seccomp_data,           \
++                                          instruction_pointer) + 0)
++#define SECCOMP_ARG_MSB_IDX(nr) (offsetof(struct arch_seccomp_data, args) +   \
++                                 8*(nr) + 4)
++#define SECCOMP_ARG_LSB_IDX(nr) (offsetof(struct arch_seccomp_data, args) +   \
++                                 8*(nr) + 0)
++
++// On Mips we don't have structures like user_regs or user_regs_struct in
++// sys/user.h that we could use, so we just define regs_struct directly.
++struct regs_struct {
++  unsigned long long regs[32];
++};
++
++#define REG_a7 regs[11]
++#define REG_a6 regs[10]
++#define REG_a5 regs[9]
++#define REG_a4 regs[8]
++#define REG_a3 regs[7]
++#define REG_a2 regs[6]
++#define REG_a1 regs[5]
++#define REG_a0 regs[4]
++#define REG_v1 regs[3]
++#define REG_v0 regs[2]
++
++#define SECCOMP_PT_RESULT(_regs)  (_regs).REG_v0
++#define SECCOMP_PT_SYSCALL(_regs) (_regs).REG_v0
++#define SECCOMP_PT_PARM1(_regs)   (_regs).REG_a0
++#define SECCOMP_PT_PARM2(_regs)   (_regs).REG_a1
++#define SECCOMP_PT_PARM3(_regs)   (_regs).REG_a2
++#define SECCOMP_PT_PARM4(_regs)   (_regs).REG_a3
++#define SECCOMP_PT_PARM5(_regs)   (_regs).REG_a4
++#define SECCOMP_PT_PARM6(_regs)   (_regs).REG_a5
++#define SECCOMP_PT_PARM7(_regs)   (_regs).REG_a6
++#define SECCOMP_PT_PARM8(_regs)   (_regs).REG_a7
++
+ #elif defined(__aarch64__)
+ struct regs_struct {
+   unsigned long long regs[31];
+diff --git a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/syscall_set.cc b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/syscall_set.cc
+index 3d61fa3..f79d1d5 100644
+--- a/src/3rdparty/chromium/sandbox/linux/bpf_dsl/syscall_set.cc
++++ b/src/3rdparty/chromium/sandbox/linux/bpf_dsl/syscall_set.cc
+@@ -17,6 +17,9 @@ namespace {
+ #if defined(__mips__) && (_MIPS_SIM == _MIPS_SIM_ABI32)
+ // This is true for Mips O32 ABI.
+ static_assert(MIN_SYSCALL == __NR_Linux, "min syscall number should be 4000");
++#elif defined(__mips__) && (_MIPS_SIM == _ABI64)
++// This is true for Mips n64 ABI.
++static_assert(MIN_SYSCALL == __NR_Linux, "min syscall number should be 5000");
+ #else
+ // This true for supported architectures (Intel and ARM EABI).
+ static_assert(MIN_SYSCALL == 0u,
+diff --git a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
+index 88a9326..95cb77b 100644
+--- a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
++++ b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
+@@ -86,7 +86,7 @@ bool IsBaselinePolicyWatched(int sysno) {
+          SyscallSets::IsNuma(sysno) ||
+          SyscallSets::IsPrctl(sysno) ||
+          SyscallSets::IsProcessGroupOrSession(sysno) ||
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+          SyscallSets::IsSocketCall(sysno) ||
+ #endif
+ #if defined(__arm__)
+@@ -147,7 +147,8 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
+   if (sysno == __NR_fcntl)
+     return RestrictFcntlCommands();
+ 
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+   if (sysno == __NR_fcntl64)
+     return RestrictFcntlCommands();
+ #endif
+@@ -191,7 +192,8 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
+     return RestrictMmapFlags();
+ #endif
+ 
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+   if (sysno == __NR_mmap2)
+     return RestrictMmapFlags();
+ #endif
+@@ -236,7 +238,7 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
+     return Error(EPERM);
+   }
+ 
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+   if (SyscallSets::IsSocketCall(sysno))
+     return RestrictSocketcallCommand();
+ #endif
+diff --git a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
+index b30b3e6..07eb6ab 100644
+--- a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
++++ b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.cc
+@@ -28,7 +28,8 @@ bool SyscallSets::IsKill(int sysno) {
+ bool SyscallSets::IsAllowedGettime(int sysno) {
+   switch (sysno) {
+     case __NR_gettimeofday:
+-#if defined(__i386__) || defined(__x86_64__) || defined(__mips__)
++#if defined(__i386__) || defined(__x86_64__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_time:
+ #endif
+       return true;
+@@ -38,11 +39,11 @@ bool SyscallSets::IsAllowedGettime(int sysno) {
+     case __NR_clock_gettime:
+     case __NR_clock_nanosleep:  // Could be allowed.
+     case __NR_clock_settime:    // Privileged.
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_ftime:  // Obsolete.
+ #endif
+     case __NR_settimeofday:  // Privileged.
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_stime:
+ #endif
+     default:
+@@ -97,7 +98,9 @@ bool SyscallSets::IsFileSystem(int sysno) {
+     case __NR_stat:  // EPERM not a valid errno.
+     case __NR_symlink:
+     case __NR_unlink:
++#if !(defined(__mips__) && (_MIPS_SIM == _ABI64))
+     case __NR_uselib:  // Neither EPERM, nor ENOENT are valid errno.
++#endif
+     case __NR_ustat:   // Same as above. Deprecated.
+     case __NR_utimes:
+ #endif  // !defined(__aarch64__)
+@@ -108,7 +111,8 @@ bool SyscallSets::IsFileSystem(int sysno) {
+     case __NR_fchownat:  // Should be called chownat ?
+ #if defined(__x86_64__) || defined(__aarch64__)
+     case __NR_newfstatat:  // fstatat(). EPERM not a valid errno.
+-#elif defined(__i386__) || defined(__arm__) || defined(__mips__)
++#elif defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_fstatat64:
+ #endif
+ #if defined(__i386__) || defined(__arm__)
+@@ -117,12 +121,11 @@ bool SyscallSets::IsFileSystem(int sysno) {
+     case __NR_linkat:
+     case __NR_lookup_dcookie:  // ENOENT not a valid errno.
+ 
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_lstat64:
+ #endif
+-#if defined(__i386__) || defined(__arm__) || defined(__x86_64__)
+     case __NR_memfd_create:
+-#endif
+     case __NR_mkdirat:
+     case __NR_mknodat:
+ #if defined(__i386__)
+@@ -133,16 +136,19 @@ bool SyscallSets::IsFileSystem(int sysno) {
+     case __NR_readlinkat:
+     case __NR_renameat:
+     case __NR_renameat2:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_stat64:
+ #endif
+     case __NR_statfs:  // EPERM not a valid errno.
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_statfs64:
+ #endif
+     case __NR_symlinkat:
+     case __NR_truncate:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32) )
+     case __NR_truncate64:
+ #endif
+     case __NR_unlinkat:
+@@ -159,7 +165,8 @@ bool SyscallSets::IsFileSystem(int sysno) {
+ bool SyscallSets::IsAllowedFileSystemAccessViaFd(int sysno) {
+   switch (sysno) {
+     case __NR_fstat:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_fstat64:
+ #endif
+       return true;
+@@ -176,7 +183,8 @@ bool SyscallSets::IsAllowedFileSystemAccessViaFd(int sysno) {
+     case __NR_fdatasync:  // EPERM not a valid errno.
+     case __NR_flock:      // EPERM not a valid errno.
+     case __NR_fstatfs:    // Give information about the whole filesystem.
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_fstatfs64:
+ #endif
+     case __NR_fsync:  // EPERM not a valid errno.
+@@ -204,14 +212,15 @@ bool SyscallSets::IsDeniedFileSystemAccessViaFd(int sysno) {
+ #if defined(__i386__) || defined(__arm__)
+     case __NR_fchown32:
+ #endif
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32) )
+     case __NR_ftruncate64:
+ #endif
+ #if !defined(__aarch64__)
+     case __NR_getdents:    // EPERM not a valid errno.
+ #endif
+     case __NR_getdents64:  // EPERM not a valid errno.
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_readdir:
+ #endif
+       return true;
+@@ -301,7 +310,8 @@ bool SyscallSets::IsAllowedSignalHandling(int sysno) {
+     case __NR_rt_sigaction:
+     case __NR_rt_sigprocmask:
+     case __NR_rt_sigreturn:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_sigaction:
+     case __NR_sigprocmask:
+     case __NR_sigreturn:
+@@ -317,11 +327,12 @@ bool SyscallSets::IsAllowedSignalHandling(int sysno) {
+     case __NR_signalfd:
+ #endif
+     case __NR_signalfd4:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_sigpending:
+     case __NR_sigsuspend:
+ #endif
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_signal:
+     case __NR_sgetmask:  // Obsolete.
+     case __NR_ssetmask:
+@@ -345,7 +356,8 @@ bool SyscallSets::IsAllowedOperationOnFd(int sysno) {
+ #endif
+       return true;
+     case __NR_fcntl:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_fcntl64:
+ #endif
+     default:
+@@ -462,12 +474,14 @@ bool SyscallSets::IsDeniedGetOrModifySocket(int sysno) {
+   }
+ }
+ 
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+ // Big multiplexing system call for sockets.
+ bool SyscallSets::IsSocketCall(int sysno) {
+   switch (sysno) {
++#if !(defined(__mips__) && (_MIPS_SIM == _ABI64))
+     case __NR_socketcall:
+       return true;
++#endif
+     default:
+       return false;
+   }
+@@ -502,10 +516,12 @@ bool SyscallSets::IsAllowedAddressSpaceAccess(int sysno) {
+     defined(__aarch64__)
+     case __NR_mmap:
+ #endif
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_mmap2:
+ #endif
+-#if defined(__i386__) || defined(__x86_64__) || defined(__mips__)
++#if defined(__i386__) || defined(__x86_64__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_modify_ldt:
+ #endif
+     case __NR_mprotect:
+@@ -526,7 +542,8 @@ bool SyscallSets::IsAllowedAddressSpaceAccess(int sysno) {
+ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
+   switch (sysno) {
+     case __NR_lseek:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR__llseek:
+ #endif
+ #if !defined(__aarch64__)
+@@ -536,7 +553,7 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
+     case __NR_pselect6:
+     case __NR_read:
+     case __NR_readv:
+-#if defined(__arm__) || defined(__mips__)
++#if defined(__arm__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_recv:
+ #endif
+ #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
+@@ -550,7 +567,7 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
+ #if defined(__i386__) || defined(__arm__) || defined(__mips__)
+     case __NR__newselect:
+ #endif
+-#if defined(__arm__) || defined(__mips__)
++#if defined(__arm__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_send:
+ #endif
+ #if defined(__x86_64__) || defined(__arm__) || defined(__mips__) || \
+@@ -568,7 +585,8 @@ bool SyscallSets::IsAllowedGeneralIo(int sysno) {
+     case __NR_pwritev:
+     case __NR_recvmmsg:  // Could specify source.
+     case __NR_sendfile:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_sendfile64:
+ #endif
+     case __NR_sendmmsg:  // Could specify destination.
+@@ -610,7 +628,8 @@ bool SyscallSets::IsAllowedBasicScheduler(int sysno) {
+     case __NR_nanosleep:
+       return true;
+     case __NR_getpriority:
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_nice:
+ #endif
+     case __NR_setpriority:
+@@ -621,7 +640,8 @@ bool SyscallSets::IsAllowedBasicScheduler(int sysno) {
+ 
+ bool SyscallSets::IsAdminOperation(int sysno) {
+   switch (sysno) {
+-#if defined(__i386__) || defined(__arm__) || defined(__mips__)
++#if defined(__i386__) || defined(__arm__) || (defined(__mips__) && \
++    (_MIPS_SIM == _ABIO32))
+     case __NR_bdflush:
+ #endif
+     case __NR_kexec_load:
+@@ -669,7 +689,7 @@ bool SyscallSets::IsFsControl(int sysno) {
+     case __NR_quotactl:
+     case __NR_swapoff:
+     case __NR_swapon:
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_umount:
+ #endif
+     case __NR_umount2:
+@@ -720,7 +740,7 @@ bool SyscallSets::IsGlobalProcessEnvironment(int sysno) {
+ #if defined(__i386__) || defined(__arm__)
+     case __NR_ugetrlimit:
+ #endif
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_ulimit:
+ #endif
+     case __NR_getrusage:
+@@ -801,10 +821,9 @@ bool SyscallSets::IsKeyManagement(int sysno) {
+   }
+ }
+ 
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
+-bool SyscallSets::IsSystemVSemaphores(int sysno) {
+-  switch (sysno) {
+-    case __NR_semctl:
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) && (_MIPS_SIM == _ABI64))
++bool SyscallSets::IsSystemVSemaphores(int sysno) { switch (sysno) { case __NR_semctl:
+     case __NR_semget:
+     case __NR_semop:
+     case __NR_semtimedop:
+@@ -815,7 +834,8 @@ bool SyscallSets::IsSystemVSemaphores(int sysno) {
+ }
+ #endif
+ 
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) && (_MIPS_SIM == _ABI64))
+ // These give a lot of ambient authority and bypass the setuid sandbox.
+ bool SyscallSets::IsSystemVSharedMemory(int sysno) {
+   switch (sysno) {
+@@ -830,7 +850,8 @@ bool SyscallSets::IsSystemVSharedMemory(int sysno) {
+ }
+ #endif
+ 
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) && (_MIPS_SIM == _ABI64))
+ bool SyscallSets::IsSystemVMessageQueue(int sysno) {
+   switch (sysno) {
+     case __NR_msgctl:
+@@ -844,12 +865,14 @@ bool SyscallSets::IsSystemVMessageQueue(int sysno) {
+ }
+ #endif
+ 
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+ // Big system V multiplexing system call.
+ bool SyscallSets::IsSystemVIpc(int sysno) {
+   switch (sysno) {
++#if !(defined(__mips__) && (_MIPS_SIM == _ABI64))
+     case __NR_ipc:
+       return true;
++#endif
+     default:
+       return false;
+   }
+@@ -857,10 +880,11 @@ bool SyscallSets::IsSystemVIpc(int sysno) {
+ #endif
+ 
+ bool SyscallSets::IsAnySystemV(int sysno) {
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) \
++    || (defined(__mips__) && (_MIPS_SIM == _ABI64))
+   return IsSystemVMessageQueue(sysno) || IsSystemVSemaphores(sysno) ||
+          IsSystemVSharedMemory(sysno);
+-#elif defined(__i386__) || defined(__mips__)
++#elif defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+   return IsSystemVIpc(sysno);
+ #endif
+ }
+@@ -975,13 +999,13 @@ bool SyscallSets::IsMisc(int sysno) {
+ #if defined(__i386__) || defined(__x86_64__) || defined(__mips__)
+     case __NR_afs_syscall:
+ #endif
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_break:
+ #endif
+ #if defined(__i386__) || defined(__x86_64__) || defined(__mips__)
+     case __NR_getpmsg:
+ #endif
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_gtty:
+     case __NR_idle:
+     case __NR_lock:
+@@ -995,7 +1019,7 @@ bool SyscallSets::IsMisc(int sysno) {
+ #if defined(__x86_64__)
+     case __NR_security:
+ #endif
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+     case __NR_stty:
+ #endif
+ #if defined(__x86_64__)
+@@ -1050,7 +1074,9 @@ bool SyscallSets::IsMipsPrivate(int sysno) {
+ bool SyscallSets::IsMipsMisc(int sysno) {
+   switch (sysno) {
+     case __NR_sysmips:
++#if !(defined(__mips__) && (_MIPS_SIM == _ABI64))
+     case __NR_unused150:
++#endif
+       return true;
+     default:
+       return false;
+diff --git a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
+index 5ba6335..54f059a 100644
+--- a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
++++ b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf-helpers/syscall_sets.h
+@@ -42,7 +42,7 @@ class SANDBOX_EXPORT SyscallSets {
+   static bool IsAllowedGetOrModifySocket(int sysno);
+   static bool IsDeniedGetOrModifySocket(int sysno);
+ 
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) &&(_MIPS_SIM == _ABIO32))
+   // Big multiplexing system call for sockets.
+   static bool IsSocketCall(int sysno);
+ #endif
+@@ -70,19 +70,22 @@ class SANDBOX_EXPORT SyscallSets {
+   // Asynchronous I/O API.
+   static bool IsAsyncIo(int sysno);
+   static bool IsKeyManagement(int sysno);
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) &&(_MIPS_SIM == _ABI64))
+   static bool IsSystemVSemaphores(int sysno);
+ #endif
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) &&(_MIPS_SIM == _ABI64))
+   // These give a lot of ambient authority and bypass the setuid sandbox.
+   static bool IsSystemVSharedMemory(int sysno);
+ #endif
+ 
+-#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__)
++#if defined(__x86_64__) || defined(__arm__) || defined(__aarch64__) || \
++    (defined(__mips__) &&(_MIPS_SIM == _ABI64))
+   static bool IsSystemVMessageQueue(int sysno);
+ #endif
+ 
+-#if defined(__i386__) || defined(__mips__)
++#if defined(__i386__) || (defined(__mips__) && (_MIPS_SIM == _ABIO32))
+   // Big system V multiplexing system call.
+   static bool IsSystemVIpc(int sysno);
+ #endif
+diff --git a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/syscall.cc b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/syscall.cc
+index 4d55936..08d0b0b 100644
+--- a/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/syscall.cc
++++ b/src/3rdparty/chromium/sandbox/linux/seccomp-bpf/syscall.cc
+@@ -188,7 +188,7 @@ asm(// We need to be able to tell the kernel exactly where we made a
+     ".fnend\n"
+ #endif
+     "9:.size SyscallAsm, 9b-SyscallAsm\n"
+-#elif defined(__mips__)
++#elif defined(__mips__) && (_MIPS_SIM == _ABIO32)
+     ".text\n"
+     ".option pic2\n"
+     ".align 4\n"
+@@ -240,6 +240,53 @@ asm(// We need to be able to tell the kernel exactly where we made a
+     ".set    pop\n"
+     ".end    SyscallAsm\n"
+     ".size   SyscallAsm,.-SyscallAsm\n"
++#elif defined(__mips__) && (_MIPS_SIM == _ABI64)
++    ".text\n"
++    ".option pic2\n"
++    ".global SyscallAsm\n"
++    ".type SyscallAsm, @function\n"
++    "SyscallAsm:.ent SyscallAsm\n"
++    ".frame  $sp, 16, $ra\n"
++    ".set   push\n"
++    ".set   noreorder\n"
++    "daddiu  $sp, $sp, -16\n"
++    ".cpsetup $25, 0, SyscallAsm\n"
++    "sd     $ra, 8($sp)\n"
++    // Check if "v0" is negative. If so, do not attempt to make a
++    // system call. Instead, compute the return address that is visible
++    // to the kernel after we execute "syscall". This address can be
++    // used as a marker that BPF code inspects.
++    "bgez   $v0, 1f\n"
++    " nop\n"
++    // This is equivalent to "la $v0, 2f".
++    // LA macro has to be avoided since LLVM-AS has issue with LA in PIC mode
++    // https://llvm.org/bugs/show_bug.cgi?id=27644
++    "ld     $v0, %got(2f)($gp)\n"
++    "daddiu  $v0, $v0, %lo(2f)\n"
++    "b      2f\n"
++    " nop\n"
++    // On MIPS N64 all eight arguments go to registers a0 - a7
++    // We can go ahead and directly copy the entries from the arguments array
++    // into the appropriate CPU registers.
++    "1:ld     $a7, 56($a0)\n"
++    "ld     $a6, 48($a0)\n"
++    "ld     $a5, 40($a0)\n"
++    "ld     $a4, 32($a0)\n"
++    "ld     $a3, 24($a0)\n"
++    "ld     $a2, 16($a0)\n"
++    "ld     $a1, 8($a0)\n"
++    "ld     $a0, 0($a0)\n"
++    // Enter the kernel
++    "syscall\n"
++    // This is our "magic" return address that the BPF filter sees.
++    // Restore the return address from the stack.
++    "2:ld     $ra, 8($sp)\n"
++    ".cpreturn\n"
++    "jr     $ra\n"
++    "daddiu  $sp, $sp, 16\n"
++    ".set    pop\n"
++    ".end    SyscallAsm\n"
++    ".size   SyscallAsm,.-SyscallAsm\n"
+ #elif defined(__aarch64__)
+     ".text\n"
+     ".align 2\n"
+@@ -359,7 +406,7 @@ intptr_t Syscall::Call(int nr,
+   }
+ #elif defined(__mips__)
+   int err_status;
+-  intptr_t ret = Syscall::SandboxSyscallRaw(nr, args, &err_status);
++  intptr_t ret = Syscall::SandboxSyscallRaw(nr, args, (intptr_t*)&err_status);
+ 
+   if (err_status) {
+     // On error, MIPS returns errno from syscall instead of -errno.
+diff --git a/src/3rdparty/chromium/sandbox/linux/system_headers/linux_seccomp.h b/src/3rdparty/chromium/sandbox/linux/system_headers/linux_seccomp.h
+index 3deb3d2..a60fe2a 100644
+--- a/src/3rdparty/chromium/sandbox/linux/system_headers/linux_seccomp.h
++++ b/src/3rdparty/chromium/sandbox/linux/system_headers/linux_seccomp.h
+@@ -48,6 +48,9 @@
+ #ifndef AUDIT_ARCH_MIPSEL
+ #define AUDIT_ARCH_MIPSEL (EM_MIPS|__AUDIT_ARCH_LE)
+ #endif
++#ifndef AUDIT_ARCH_MIPSEL64
++#define AUDIT_ARCH_MIPSEL64 (EM_MIPS|__AUDIT_ARCH_64BIT|__AUDIT_ARCH_LE)
++#endif
+ #ifndef AUDIT_ARCH_AARCH64
+ #define AUDIT_ARCH_AARCH64 (EM_AARCH64 | __AUDIT_ARCH_64BIT | __AUDIT_ARCH_LE)
+ #endif
+-- 
+2.1.0
+
Index: _constraints
===================================================================
--- _constraints	(revision 1)
+++ _constraints	(working copy)
@@ -1,11 +0,0 @@
-<constraints>
- <hardware>
-  <disk>
-   <size unit="G">7</size>
-  </disk>
-  <memory>
-   <size unit="G">9</size>
-  </memory>
-  <processors>4</processors>
- </hardware>
-</constraints>
