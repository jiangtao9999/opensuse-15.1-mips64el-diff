Index: vegastrike.spec
===================================================================
--- vegastrike.spec	(revision 1)
+++ vegastrike.spec	(working copy)
@@ -49,6 +49,7 @@
 Patch10:        vegastrike_ppc64.patch
 # PATCH-FIX-UPSTREAM vegastrike-src-0.5.1.r1-r13729-gcc7fix.patch -- GCC 7 fixes, already upstreamed, not yet in tarball
 Patch11:        vegastrike-src-0.5.1.r1-r13729-gcc7fix.patch
+Patch12:        vegastrike-fix-mips.patch
 BuildRequires:  SDL_mixer-devel
 BuildRequires:  autoconf
 BuildRequires:  automake
@@ -119,6 +120,7 @@
 %patch9 -p0
 %patch10 -p1
 %patch11 -p1
+%patch12 -p1
 iconv -f ISO-8859-1 -t UTF-8 README > README.tmp
 touch -r README README.tmp
 mv README.tmp README
Index: vegastrike-fix-mips.patch
===================================================================
--- vegastrike-fix-mips.patch	(revision 0)
+++ vegastrike-fix-mips.patch	(working copy)
@@ -0,0 +1,92 @@
+diff -Nrui vegastrike-src-0.5.1.r1-orig/src/gldrv/gl_texture.cpp vegastrike-src-0.5.1.r1/src/gldrv/gl_texture.cpp
+--- vegastrike-src-0.5.1.r1-orig/src/gldrv/gl_texture.cpp	2020-05-19 22:33:29.892094855 +0800
++++ vegastrike-src-0.5.1.r1/src/gldrv/gl_texture.cpp	2020-05-19 22:38:35.303193205 +0800
+@@ -724,11 +724,11 @@
+     //Read in the number of mipmaps from buffer
+     int    offset1   = 2;
+     int    offset2;
+-    int    mips = 0;
++    int    v_mips = 0;
+     if (internformat >= DXT1 && internformat <= DXT5) {
+-        mips = 0;
+-        if (buffer[0]) mips = mips*10+(buffer[0]-'0');
+-        if (buffer[1]) mips = mips*10+(buffer[1]-'0');
++        v_mips = 0;
++        if (buffer[0]) v_mips = v_mips*10+(buffer[0]-'0');
++        if (buffer[1]) v_mips = v_mips*10+(buffer[1]-'0');
+     }
+     if (inWidth > 0)
+         textures[handle].iwidth = textures[handle].width = inWidth;
+@@ -762,7 +762,7 @@
+                               textures[handle].width,
+                               textures[handle].height,
+                               maxdimension,
+-                              mips,
++                              v_mips,
+                               textures[handle].name,
+                               GetImageTargetName( imagetarget )
+                             );
+@@ -774,13 +774,13 @@
+         glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
+         glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
+         if (internformat >= DXT1 && internformat <= DXT5) {
+-            if (textures[handle].width > 8 && textures[handle].height > 8 && mips > 0) {
++            if (textures[handle].width > 8 && textures[handle].height > 8 && v_mips > 0) {
+                 offset1 += ( (textures[handle].width+3)/4 )*( (textures[handle].height+3)/4 )*blocksize;
+                 if (textures[handle].width > 1) textures[handle].width   >>= 1;
+                 if (textures[handle].height > 1) textures[handle].height  >>= 1;
+                 if (textures[handle].iwidth > 1) textures[handle].iwidth  >>= 1;
+                 if (textures[handle].iheight > 1) textures[handle].iheight >>= 1;
+-                --mips;
++                --v_mips;
+             }
+         }
+     }
+@@ -788,18 +788,18 @@
+     if (internformat == DXT1 || internformat == DXT1RGBA)
+         blocksize = 8;
+     if (internformat >= DXT1 && internformat <= DXT5) {
+-        while ( (textures[handle].width > maxdimension || textures[handle].height > maxdimension) && mips > 0 ) {
++        while ( (textures[handle].width > maxdimension || textures[handle].height > maxdimension) && v_mips > 0 ) {
+             offset1 += ( (textures[handle].width+3)/4 )*( (textures[handle].height+3)/4 )*blocksize;
+             if (textures[handle].width > 1) textures[handle].width   >>= 1;
+             if (textures[handle].height > 1) textures[handle].height  >>= 1;
+             if (textures[handle].iwidth > 1) textures[handle].iwidth  >>= 1;
+             if (textures[handle].iheight > 1) textures[handle].iheight >>= 1;
+-            --mips;
++            --v_mips;
+         }
+         offset2 = offset1;
+         int w = textures[handle].width;
+         int h = textures[handle].height;
+-        for (int i = 0; i < mips; ++i) {
++        for (int i = 0; i < v_mips; ++i) {
+             offset2 += ( (w+3)/4 )*( (h+3)/4 )*blocksize;
+             if (w > 1) w >>= 1;
+             if (h > 1) h >>= 1;
+@@ -914,21 +914,21 @@
+                 //from the division by 4. Because of catenation, all other numbers will result with
+                 //the expected number as if the +3 wasn't there. same as max(1,width/4)
+                 size = ( (width+3)/4 )*( (height+3)/4 )*blocksize;
+-                for (i = 0; i < mips; ++i) {
++                for (i = 0; i < v_mips; ++i) {
+                     glCompressedTexImage2D_p( image2D, i, internalformat, width, height, 0, size, buffer+offset1+offset );
+-                    //We halve width and height until they reach 1, or i == mips
++                    //We halve width and height until they reach 1, or i == v_mips
+                     if (width != 1)
+                         width >>= 1;
+                     if (height != 1)
+                         height >>= 1;
+-                    if (i < mips-1)
++                    if (i < v_mips-1)
+                         offset += size;
+                     size = ( (width+3)/4 )*( (height+3)/4 )*blocksize;
+                 }
+                 /* HACK */
+                 //This is a workaround for ani_texture which hates not having
+                 //mipmaps.
+-                if (mips == 0) {
++                if (v_mips == 0) {
+                     size = ( (width+3)/4 )*( (height+3)/4 )*blocksize;
+                     //We need to reverse some parameters that are set cuz
+                     //we're supposed to have mipmaps here.  But ani_texture hates us.
Index: _constraints
===================================================================
--- _constraints	(revision 1)
+++ _constraints	(working copy)
@@ -1,7 +0,0 @@
-<constraints>
-  <hardware>
-    <memory>
-      <size unit="M">4000</size>
-    </memory>
-  </hardware>
-</constraints>
